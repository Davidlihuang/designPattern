# designPattern
设计模式学习笔记
## 一、单例模式
1. 定义：保证一个类只有一个实例，并提供一个该示例的全局访问点。
2. 动机：软件系统中年，经常有这样的一些特殊的类，必须保证他们在系统中只存在一个实例，才能保证它们逻辑正确性、以及良好的效率。
2. 类图
   属性：
       static uniqueInstance; //静态实例
       singletonData;         //单例中的数据
   方法：
       static getInstance(); //获取单例对象，若不存在则构建，否则直接获取
       SingletonOperation(); //单例对象相关的操作
       GetSingletonData();   //获取单例的数据
3. 构建单例的方式
    ① 、线程非安全版本
    Singleton* Singleton::getInstance()
    {
       if(m_instance == nullptr)
       {
           m_instance = new Singleton();
       }
       return m_instance;
    }
    · 分析：
        当有多个线程同时通过了判空进入了if的语句块中，那么就有可能出现被多个线程创建多个对象的情况，所以该方法是非线程安全的版本。只适合在单线程上使用。
    ② 、线程安全，但是锁的代价过高。
    Singleton* Singleton::getInstance()
    {
        Lock lock; //伪代码，加锁
        if(nullptr == m_instance)
        {
            m_instance = new Singleton();
        }
        return m_instance;   
    }
    · 分析
        为了解决线程安全问题，可以考虑加锁，这样子保证同一时间只能有一个线程创建实例。但是以上方式无论是读写都需要获取锁才能进行操作，在多线程中，读数据是没有必要加锁的，这里读取数据的等待时间，将导致效率大大降低。
   ③ 、双检查锁，但由于内存读写reorder造成问题
    Singleton* Singleton::getInstance()
    {
        if(nullptr == m_instance)
        {
            Lock lock;//伪代码，加锁
            if(nullptr == m_instance)
            {
                m_instance = new Singleton();
            }
        }
        return m_instance;
    }
    · 分析：
        锁前检查：区分读写，提高效率
        锁后检查：防止多个线程同时通过第一个检查点后，多次创建。
        reorder会导致失效：在编译器会进行一次指令的优化，new中理论上会先分配内存然后构造对象最后返回指针，但是优化后会有先返回指针，再调用构造器的可能。这导致紧随其后的线程获得没有经过初始化的实例。
        解决reorder: java/c# 实例变量声明时增加volatile， 
   ④ 、c++11的跨平台线程安全以及reorder的解决方案
    std::atomic<Singleton*> SingleTon::m_instance;
    std::mutex Singleton::m_mutex;

    Singleton* Singleton::getInstance()
    {
        Singleton* tmp = m_instance.load(std::memory_order_relaxed);
        std::atomic_thread_fence(std::memory_order_acquire);// 获取内存fence,防止reorder
        if(tmp == nullptr)
        {
           std::lock_guard<std::mutex> lock(m_mutex);
           tmp = m_instance.load(std::memory_order_relaxed);
           if(tmp == nullptr)
           {
               tmp = new Singleton;
               std::atomic_thread_fence(std::memory_order_release);//释放内存fence
               m_instance.store(tmp,std::memory_order_relaxed);
           }
        }
        return tmp;
    }

    · 分析：
       通过使用std::atomic_thread_fence去告诉编译器，不需要进行reorder的时机。以解决双检查锁的因为reorder导致的问题。

   ⑤ 、使用引用
   ⑥ 、使用pthread

